Description: >
    Ahmed Abdallah / risk-ident
    This template deploys a Jenkins Master Box, a Ubuntu Dev Box and an Amazon EKS Setup

Parameters:
    EnvironmentName:
      Description: An Environment name that will be prefixed to resources' names
      Type: String
    VpcCIDR:
      Description: Please enter the IP range (CIDR notation)
      Type: String
      Default: 10.0.0.0/16
    PublicSubnet1CIDR:
      Description: CIDR notation for the public subnet in Availability Zone No.1
      Type: String
      Default: 10.0.1.0/24
    PublicSubnet2CIDR:
      Description: CIDR notation for the public subnet in Availability Zone No.2
      Type: String
      Default: 10.0.1.0/24

Resources:
    # Network Setup Here
    VPC:
      Type: AWS::EC2::VPC
      Properties:
        CidrBlock: !Ref VpcCIDR
        EnableDnsHostnames: true
        Tags:
          - Key: Name
            Value: !Sub ${EnvironmentName}_VPC

    InternetGateway:
      Type: AWS::EC2::InternetGateway
      Properties:
        Tags:
          - Key: Name
            Value: !Sub ${EnvironmentName}_IGW

    InternetGatewayAttachment:
      Type: AWS::EC2::VPCGatewayAttachment
      Properties:
        VpcId: !Ref VPC
        InternetGatewayId: !Ref InternetGateway

    PublicSubnet1:
      Type: AWS::EC2::Subnet
      Properties:
        VpcId: !Ref VPC
        AvailabilityZone: !Select [ 0, !GetAZs '' ]
        CidrBlock: !Ref PublicSubnet1CIDR
        MapPublicIpOnLaunch: true
        Tags: 
          - Key: Name
            Value: !Sub ${EnvironmentName}_Public_Subnet_AZ1

    PublicSubnet2:
      Type: AWS::EC2::Subnet
      Properties:
          VpcId: !Ref VPC
          AvailabilityZone: !Select [ 1, !GetAZs '' ]
          CidrBlock: !Ref PublicSubnet2CIDR
          MapPublicIpOnLaunch: true
          Tags: 
            - Key: Name
              Value: !Sub ${EnvironmentName}_Public_Subnet_AZ2

    PublicRouteTable:
      Type: AWS::EC2::RouteTable
      Properties:
        VpcId: !Ref VPC
        Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}_Public_Route_Table

    DefaultPublicRoute:
      Type: AWS::EC2::Route
      DependsOn: InternetGatewayAttachment
      Properties:
        RouteTableId: !Ref PublicRouteTable
        DestinationCidrBlock: 0.0.0.0/0
        GatewayId: !Ref InternetGateway

    PublicSubnet1RouteTableAssociation:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties:
        SubnetId: !Ref PublicSubnet1
        RouteTableId: !Ref PublicRouteTable

    PublicSubnet2RouteTableAssociation:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties:
        SubnetId: !Ref PublicSubnet2
        RouteTableId: !Ref PublicRouteTable




    # Security Groups
    EC2SecGroup:
        Properties:
            GroupDescription: Allow http to our Jenkins Server for my IP Only
            SecurityGroupEgress:
            - CidrIp: 0.0.0.0/0
              FromPort: 0
              IpProtocol: tcp
              ToPort: 65535
            SecurityGroupIngress:
            - CidrIp: 0.0.0.0/0
              FromPort: 80
              IpProtocol: tcp
              ToPort: 80
            - CidrIp: 0.0.0.0/0
              FromPort: 8080
              IpProtocol: tcp
              ToPort: 8080
            - CidrIp: 0.0.0.0/0
              FromPort: 22
              IpProtocol: tcp
              ToPort: 22
            Tags: 
                - Key: Name 
                  Value: !Sub ${EnvironmentName}-EC2SecGroup
            VpcId: !Ref VPC
        Type: AWS::EC2::SecurityGroup
    SecGroup:
        Properties:
            GroupDescription: Allow http to our load balancer
            SecurityGroupEgress:
            - CidrIp: 0.0.0.0/0
              FromPort: 0
              IpProtocol: tcp
              ToPort: 65535
            SecurityGroupIngress:
            - CidrIp: 0.0.0.0/0
              FromPort: 8080
              IpProtocol: tcp
              ToPort: 8080
            - CidrIp: 0.0.0.0/0
              FromPort: 80
              IpProtocol: tcp
              ToPort: 80
            Tags: 
                - Key: Name 
                  Value: !Sub ${EnvironmentName}-SecGroup
            VpcId: !Ref VPC
        Type: AWS::EC2::SecurityGroup




    # IAM Roles
    EKSClusterRole:
        Type: AWS::IAM::Role
        Properties:
            AssumeRolePolicyDocument:
                Version: '2012-10-17'
                Statement:
                - Effect: Allow
                  Principal:
                    Service:
                    - eks.amazonaws.com
                  Action:
                  - sts:AssumeRole
            Tags: 
                - Key: Name 
                  Value: !Sub ${EnvironmentName}_EKSClusterRole
            ManagedPolicyArns:
                - arn:aws:iam::aws:policy/AmazonEKSClusterPolicy

    EKSNodeRole:
        Type: AWS::IAM::Role
        Properties:
            AssumeRolePolicyDocument:
                Version: '2012-10-17'
                Statement:
                - Effect: Allow
                  Principal:
                    Service:
                    - ec2.amazonaws.com
                  Action:
                  - sts:AssumeRole
            ManagedPolicyArns:
            - arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy
            - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly
            - arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy
            Tags: 
                - Key: Name 
                  Value: !Sub ${EnvironmentName}_EKSNodeRole

    # Jenkins Server Setup
    JenkinsInstance:
      Properties:
        BlockDeviceMappings:
        - DeviceName: "/dev/sdk"
          Ebs:
            VolumeSize: '8'
        InstanceType: t2.micro
        ImageId: ami-0807918df10edc141
        KeyName: "projectKey"
        NetworkInterfaces: 
          - AssociatePublicIpAddress: "true"
            DeviceIndex: "0"
            GroupSet: 
              - Ref: EC2SecGroup
            SubnetId: 
              Ref: "PublicSubnet1"
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash
            #--Setup Server--
            apt-get update -y
            # Install Unzip
            apt install unzip
            # Java Runtime for Jenkins
            apt install default-jdk -y
            # Docker Setup
            apt install docker.io -y
            # AWS CLI V2
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            ./aws/install
            # Install Kubectl
            curl -o kubectl https://amazon-eks.s3.us-west-2.amazonaws.com/1.16.8/2020-04-16/bin/linux/amd64/kubectl
            chmod +x ./kubectl
            mkdir -p $HOME/bin && cp ./kubectl $HOME/bin/kubectl && export PATH=$PATH:$HOME/bin
            echo 'export PATH=$PATH:$HOME/bin' >> ~/.bashrc
            # Install eksctl
            curl --silent --location "https://github.com/weaveworks/eksctl/releases/download/0.20.0-rc.0/eksctl_Linux_amd64.tar.gz" | tar xz -C /tmp
            mv /tmp/eksctl /usr/local/bin
            # Add Jenkins Key and Source List to Server
            wget -q -O - https://pkg.Jenkins.io/debian-stable/jenkins.io.key | sudo apt-key add -
            sh -c "echo 'deb https://pkg.jenkins.io/debian-stable binary/' > /etc/apt/sources.list.d/jenkins.list"
            apt-get update
            # Start Jenkins and Setup to Run when Ubuntu Starts
            apt install jenkins -y
            # Adding Jenkins to the Docker Security Group (Allow Aqua MicroScanner Access to Scan)
            usermod -a -G docker jenkins
            systemctl start jenkins
            systemctl enable jenkins
            systemctl status jenkins
      Type: AWS::EC2::Instance

    # Dev Server Setup
    UbuntuDevInstance:
      Properties:
        BlockDeviceMappings:
        - DeviceName: "/dev/sdk"
          Ebs:
            VolumeSize: '8'
        InstanceType: t2.micro
        ImageId: ami-0807918df10edc141
        KeyName: "projectKey"
        NetworkInterfaces: 
          - AssociatePublicIpAddress: "true"
            DeviceIndex: "0"
            GroupSet: 
              - Ref: EC2SecGroup
            SubnetId: 
              Ref: "PublicSubnet1"
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash
            #--Setup Server--
            apt-get update -y
            # Install Unzip
            apt install unzip
            # Install JQ for JSON Parsing
            apt install jq -y
            # Docker Setup
            apt install docker.io -y
            apt-get update -y
            groupadd docker
            usermod -aG docker ubuntu
            # Setup Git
            git config --global user.name "AhmedAbd-Allah"
            git config --global user.email "ahmedabdallah.programming@gmail.com"
            # AWS CLI V2
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            ./aws/install
            # Install Kubectl
            curl -o kubectl https://amazon-eks.s3.us-west-2.amazonaws.com/1.16.8/2020-04-16/bin/linux/amd64/kubectl
            chmod +x ./kubectl
            mkdir -p $HOME/bin && cp ./kubectl $HOME/bin/kubectl && export PATH=$PATH:$HOME/bin
            echo 'export PATH=$PATH:$HOME/bin' >> ~/.bashrc
            # Install eksctl
            curl --silent --location "https://github.com/weaveworks/eksctl/releases/download/0.20.0-rc.0/eksctl_Linux_amd64.tar.gz" | tar xz -C /tmp
            mv /tmp/eksctl /usr/local/bin
            # Generate SSH Key
            ssh-keygen -t rsa
      Type: AWS::EC2::Instance

    # EKS Setup
    EKSCluster:
        DependsOn:
            - EKSClusterRole
        Type: 'AWS::EKS::Cluster'
        Properties:
            Name: risk-ident-ekscluster
            Version: '1.16'
            RoleArn:  
                Fn::GetAtt: [ EKSClusterRole, Arn ]
            ResourcesVpcConfig:
                SecurityGroupIds:
                - !Ref SecGroup
                SubnetIds:
                - !Ref PublicSubnet1
                - !Ref PublicSubnet2
            
    EKSNodegroup:
        DependsOn: 
            - EKSNodeRole
            - EKSCluster
        Type: 'AWS::EKS::Nodegroup'
        Properties:
            ClusterName: risk-ident-ekscluster
            NodeRole: !GetAtt EKSNodeRole.Arn
            ScalingConfig:
                MinSize: 1
                DesiredSize: 1
                MaxSize: 1
            Labels:
                Key1: !Sub ${EnvironmentName}-EKSNodegroup
            Subnets:
                - !Ref PublicSubnet1
                - !Ref PublicSubnet2

Outputs: 
    VPC: 
        Description: A reference to the created VPC
        Export:
          Name: !Sub ${EnvironmentName}-VPCID
        Value: !Ref VPC
    JenkinsInstanceIP: 
        Description: IP of the created Jenkins EC2
        Export:
          Name: !Sub ${EnvironmentName}-JenkinsInstanceID
        Value: !GetAtt JenkinsInstance.PublicIp
    DevInstanceIP:
        Description: IP ofthe created Dev EC2 instance
        Export:
          Name: !Sub ${EnvironmentName}-UbuntuDevInstanceID
        Value: !GetAtt UbuntuDevInstance.PublicIp
    EKSClusterInstanceARN:
        Description: A reference to the EKS Cluster
        Export:
          Name: !Sub ${EnvironmentName}-EKSClusterARN
        Value: !GetAtt EKSCluster.Arn
    EKSClusterRoleArn: 
        Description: A reference to the EKSClusterRoleA rn
        Export:
          Name: !Sub ${EnvironmentName}-EKSClusterRole
        Value: !GetAtt EKSClusterRole.Arn